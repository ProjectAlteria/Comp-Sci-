import numpy as np

class Node:
    def __init__(self, pos: tuple, g_cost: float, h_cost: float):
        self.pos = pos
        self.g_cost = g_cost
        self.h_cost = h_cost
        self.f_cost = self.g_cost + self.h_cost
        self.parent = None

    def __lt__(self, other):
        return self.f_cost < other.f_cost  # sorting issues fixed with this

class AStar:
    def __init__(self, map_grid):
        self.open = []
        self.closed = []
        self.map_grid = map_grid

    def search(self, start_pos, goal_pos):
        start_node = Node(start_pos, 0, self.heuristic(start_pos, goal_pos))
        goal_node = Node(goal_pos, float("inf"), 0)

        self.open.append(start_node)

        while self.open:
            self.open.sort()
            current_node = self.open.pop(0)
            self.closed.append(current_node)

            if current_node.pos == goal_pos:
                return self.reconstruct_path(current_node)  # if the goal reached

            for neighbor_pos in self.get_neighbors(current_node):
                if any(node.pos == neighbor_pos for node in self.closed):
                    continue

                g_cost = current_node.g_cost + 1
                h_cost = self.heuristic(neighbor_pos, goal_pos)
                neighbor_node = Node(neighbor_pos, g_cost, h_cost)
                neighbor_node.parent = current_node

                # Check if it's a better path
                if any(node.pos == neighbor_pos and node.f_cost <= neighbor_node.f_cost for node in self.open):
                    continue

                self.open.append(neighbor_node)

        return None  #if no path is found

    def get_neighbors(self, node):
        dirs = [(1,0), (0,1), (-1,0), (0,-1)]
        neighbors = []

        for d in dirs:
            neighbor_pos = (node.pos[0] + d[0], node.pos[1] + d[1])

            if (0 <= neighbor_pos[0] < self.map_grid.shape[0] and
                0 <= neighbor_pos[1] < self.map_grid.shape[1]):

                if self.map_grid[neighbor_pos] != 1:  # to avoid walls 
                    neighbors.append(neighbor_pos)

        return neighbors

    def heuristic(self, pos, goal_pos):
        return abs(pos[0] - goal_pos[0]) + abs(pos[1] - goal_pos[1])  # calculates the Manhattan Distance

    def reconstruct_path(self, node):
        path = []
        while node:
            path.append(node.pos)
            node = node.parent
        return path[::-1]  # reverses the path to get start â†’ goal path

#example
grid = np.array([
    [0, 0, 0, 0, 1],
    [1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
])

astar = AStar(grid)
start = (0, 0)
goal = (4, 4)
path = astar.search(start, goal)

print("Path found:", path)
